#include<iostream>
#include<time.h> 

char orase[50][50] = { 
	"Oradea",//0
	"Zerind",
	"Arad",
	"Timisoara",
	"Lugoj",
	"Mehadia",
	"Drobeta",
	"Sibiu",
	"RamniculValcea",
	"Craiova",
	"Fagaras",
	"Pitesti",
	"Bucuresti",
	"Giurgiu",
	"Urziceni",
	"Hirsova",
	"Eforie",
	"Vaslui",
	"Iasi",
	"Neamt" //19
};

float random() {
	srand(time(0));
	float r = rand() % 10;
	if (r == 0)
		return 0;
	else
		return 1 / r;
}

int start = 0;
int stop = 0;
float traseu[21][21]{};
struct lista1 {
	int nr = 0;
	int lista[100]{};
};
lista1 listaTabu[100];
int nrfurnici = 100;

bool verificare(int furnica,int i) {
	for (int j = 0; j < listaTabu[furnica].nr; j++) {
		if (listaTabu[furnica].lista[j] == i) {
			return false;
		}
	}
	return true;
}

void print() {
	for (int i = 0; i < 20; i++) {
		for (int j = 0; j < 20; j++) {
			std::cout << traseu[i][j] << "  ";
		}
		std::cout << std::endl;
	}
	//std::cout << "\n-----------------------------\n";
}

void depunemFeromon() {
	for (int furnica = 0; furnica <= nrfurnici; furnica++) {
		float suma = 0;
		for (int i = 0; i < listaTabu[furnica].nr; i++) {
			suma += traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]];
		}
		for (int i = 0; i < listaTabu[furnica].nr; i++) {
			traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]] = traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]] / suma;
			traseu[listaTabu[furnica].lista[i + 1]][listaTabu[furnica].lista[i]] = traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]];
		}
	}
}


void evaporareFeromon() {
	for (int i = 0; i < 20; i++) {
		for (int j = 0; j < 20; j++) {
			if (traseu[i][j] != 0)
				traseu[i][j] = traseu[i][j] * 0.99;
		}
	}
}

void curatareLista() {
	for (int i = 0; i <= nrfurnici; i++) {
		for (int j = 0; j < 100; j++) {
			listaTabu[i].lista[j] = 0;
		}
		listaTabu[i].nr = 0;
	}
}

void afisareCale() {
	bool solutie = false;
	int sfarsit = 3;
	float cale1[10]{};
	int cale2[10]{};
	int k1 = 0;
	int k2 = 0;
	cale2[k2] = 0;
	while (solutie == false) {
		k1++;
		int indice = 0;
		for (int i = 0; i < 20; i++) {
			if (traseu[cale2[k2]][i] != 0 && cale1[k1] < traseu[cale2[k2]][i]) {
				bool sol = true;
				for (int j = 0; j < k2; j++) {
					if (cale2[j] == i ) {
						sol = false;
					}
				}
				if (sol == true || k2 == 0) {
					cale1[k1] = traseu[cale2[k2]][i];
					indice = i;
				}
			}
		}
		k2++;
		cale2[k2] = indice;
		if (cale2[k2] == stop)
			solutie = true;
	}
	std::cout << "\n-------------****************************-Calea este-****************************-------------\n";
	for (int i = 0; i <= k2; i++) {
		std::cout << orase[cale2[i]] <<" ";
	}
}

void cautare() {
	int iteratii = 0;

	while (iteratii != 200) {
		iteratii++;
		depunemFeromon();
		curatareLista();
		for (int furnica = 0; furnica <= nrfurnici; furnica++) {
			bool solutie = false;
			while (solutie == false){
				int nuexista = 0;
				int nRezultat = -1;
				struct rez {
					int indice = 0;
					float distanta = 0;
				};
				rez rezultat[10];
				float suma = 0;
				//listaTabu[furnica].nr++;
				//inceput de a afla probabilitatile pentru fiecare

				for (int i = 0; i < 20; i++) {
					if (i == 0)
						listaTabu[furnica].lista[i] = start;
					if (verificare(furnica,i) == true && traseu[listaTabu[furnica].lista[listaTabu[furnica].nr]][i] != 0) {
						nRezultat++;
						nuexista++;
						rezultat[nRezultat].distanta = 1 / traseu[listaTabu[furnica].lista[listaTabu[furnica].nr]][i];
						suma += rezultat[nRezultat].distanta;
						rezultat[nRezultat].indice = i;
					}
				}
				if (nuexista == 0) {
					for (int l = 0; l < 100; l++)
						listaTabu[furnica].lista[l] = 0;
					listaTabu[furnica].nr = 0;
				}
				if (nuexista != 0) {
					int k = -1;

					for (int i = 0; i < 20; i++) {
						if (verificare(furnica, i) == true && traseu[listaTabu[furnica].lista[listaTabu[furnica].nr]][i] != 0) {
							k++;
							rezultat[k].distanta = rezultat[k].distanta / suma;
							if (k != 0) {
								rezultat[k].distanta += rezultat[k - 1].distanta;
							}
						}
					}
					//alegere probabilitate si verificare
					int temp = 0;
					float r = random();

					for (int i = 0; i <= nRezultat; i++) {
						if (r <= rezultat[i].distanta && r >= temp) {
							listaTabu[furnica].nr++;
							listaTabu[furnica].lista[listaTabu[furnica].nr] = rezultat[i].indice;

							if (listaTabu[furnica].lista[listaTabu[furnica].nr] == stop)
								solutie = true;
							break;
						}
						temp = rezultat[i].distanta;
					}
				}
				
			}
		}
		evaporareFeromon();
		//print();
	}
	print();
}


void main() {
	traseu[0][1] = 71; // Oradea-Zerind
	traseu[1][0] = 71;

	traseu[0][7] = 151; // Oradea-Sibiu
	traseu[7][0] = 151;

	traseu[1][2] = 75; // Zerind-Arad
	traseu[2][1] = 75;

	traseu[2][7] = 140; // Arad-Sibiu
	traseu[7][2] = 140;

	traseu[2][3] = 118; // Arad-Timisoara
	traseu[3][2] = 118;

	traseu[3][4] = 111; // Timisoara-Lugoj
	traseu[4][3] = 111;

	traseu[4][5] = 70; // Lugoj-Mehedia
	traseu[5][4] = 70;

	traseu[5][6] = 75; // Mehedia-Drobeta
	traseu[6][5] = 75;

	traseu[6][9] = 120; // Drobeta-Craiova
	traseu[9][6] = 120;

	traseu[9][11] = 138;// Craiova-Pitesti
	traseu[11][9] = 138;

	traseu[8][9] = 146; // RamniculValcea-Craiova
	traseu[9][8] = 146;

	traseu[7][8] = 80; // Sibiu-RamniculValcea
	traseu[8][7] = 80;

	traseu[7][10] = 99;// Sibiu-Fagaras
	traseu[10][7] = 99;

	traseu[8][11] = 97;// RamniculValcea-Pitesti
	traseu[11][8] = 97;

	traseu[10][12] = 211;// Fagaras-Bucuresti
	traseu[12][10] = 211;

	traseu[11][12] = 101;// Pitesti-Bucuresti
	traseu[12][11] = 101;

	traseu[12][13] = 90;// Bucuresti-Giurgiu
	traseu[13][12] = 90;

	traseu[12][14] = 85;// Bucuresti-Urziceni
	traseu[14][12] = 85;

	traseu[14][15] = 98;// Urziceni-Hirsova
	traseu[15][14] = 98;

	traseu[15][16] = 86;// Hirsova-Eforie
	traseu[16][15] = 86;

	traseu[14][17] = 142;// Urziceni-Vaslui
	traseu[17][14] = 142;

	traseu[17][18] = 92;// Vaslui-Iasi
	traseu[18][17] = 92;

	traseu[18][19] = 87;// Iasi-Neamt
	traseu[19][18] = 87;

	

	print();
	std::cout << std::endl;
	for (int i = 0; i < 20; i++) {
		std::cout << i << "->" << orase[i] << std::endl;
	}
	std::cout << "\n***********************************************************************\n";
	std::cout << "Start:";
	std::cin >> start;
	std::cout << "Stop:";
	std::cin >> stop;

	cautare();
	afisareCale();
	std::cout << std::endl;
	system("pause");
}
