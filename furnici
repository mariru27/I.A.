#include<iostream>
#include<time.h> 

char orase[10][50] = {
	"Craiova",
	"Valcea",
	"Sibiu",
	"Brasov",
	"Bucuresti",
	"Pitesti",
};

enum {
	Cr,
	Va,
	Si,
	Br,
	Bu,
	Pi,
};

float random() {
	srand(time(0));
	float r = rand() % 10;
	if (r == 0)
		return 0;
	else
		return 1 / r;
}

float traseu[10][10]{};
struct lista1 {
	int nr = 0;
	int lista[20]{};
};
lista1 listaTabu[100];
int nrfurnici = 100;

bool verificare(int furnica,int i) {
	for (int j = 0; j < listaTabu[furnica].nr; j++) {
		if (listaTabu[furnica].lista[j] == i) {
			return false;
		}
	}
	return true;
}

void print() {
	for (int i = 0; i <= Pi; i++) {
		for (int j = 0; j <= Pi; j++) {
			std::cout << traseu[i][j] << "  ";
		}
		std::cout << std::endl;
	}
	std::cout << "\n-----------------------------\n";
}

void depunemFeromon() {
	for (int furnica = 0; furnica <= nrfurnici; furnica++) {
		float suma = 0;
		for (int i = 0; i < listaTabu[furnica].nr; i++) {
			suma += traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]];
		}
		for (int i = 0; i < listaTabu[furnica].nr; i++) {
			traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]] = traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]] / suma;
			traseu[listaTabu[furnica].lista[i + 1]][listaTabu[furnica].lista[i]] = traseu[listaTabu[furnica].lista[i]][listaTabu[furnica].lista[i + 1]];
		}
	}
}


void evaporareFeromon() {
	for (int i = 0; i <= Pi; i++) {
		for (int j = 0; j <= Pi; j++) {
			if (traseu[i][j] != 0)
				traseu[i][j] = traseu[i][j] * 0.99;
		}
	}
}

void curatareLista() {
	for (int i = 0; i <= nrfurnici; i++) {
		for (int j = 0; j <= 20; j++) {
			listaTabu[i].lista[j] = 0;
		}
		listaTabu[i].nr = 0;
	}
}

void afisareCale() {
	bool solutie = false;
	int sfarsit = 3;
	float cale1[10]{};
	int cale2[10]{};
	int k1 = 0;
	int k2 = 0;
	cale2[k2] = 0;
	while (solutie == false) {
		k1++;
		int indice = 0;
		for (int i = 0; i <= Pi; i++) {
			if (traseu[cale2[k2]][i] != 0 && cale1[k1] < traseu[cale2[k2]][i]) {
				bool sol = true;
				for (int j = 0; j < k2; j++) {
					if (cale2[j] == i ) {
						sol = false;
					}
				}
				if (sol == true || k2 == 0) {
					cale1[k1] = traseu[cale2[k2]][i];
					indice = i;
				}
			}
		}
		k2++;
		cale2[k2] = indice;
		if (cale2[k2] == 3)
			solutie = true;
	}
	std::cout << "\n--------------Calea este--------------\n";
	for (int i = 0; i <= k2; i++) {
		std::cout << orase[cale2[i]] <<" ";
	}
}

void cautare() {
	int iteratii = 0;
	while (iteratii != 200) {
		iteratii++;
		depunemFeromon();
		curatareLista();
		for (int furnica = 0; furnica <= nrfurnici; furnica++) {
			bool solutie = false;

			while (solutie == false){
				int nRezultat = -1;
				struct rez {
					int indice = 0;
					float distanta = 0;
				};
				rez rezultat[10];
				float suma = 0;
				//listaTabu[furnica].nr++;
				//inceput de a afla probabilitatile pentru fiecare

				for (int i = 0; i <= Pi; i++) {
					if (verificare(furnica,i) == true && traseu[listaTabu[furnica].lista[listaTabu[furnica].nr]][i] != 0) {
						nRezultat++;
						rezultat[nRezultat].distanta = 1 / traseu[listaTabu[furnica].lista[listaTabu[furnica].nr]][i];
						suma += rezultat[nRezultat].distanta;
						rezultat[nRezultat].indice = i;
					}
				}
				int k = -1;

				for (int i = 0; i <= Pi; i++) {
					if (verificare(furnica,i) == true && traseu[listaTabu[furnica].lista[listaTabu[furnica].nr]][i] != 0) {
						k++;
						rezultat[k].distanta = rezultat[k].distanta/suma;
						if (k != 0) {
							rezultat[k].distanta += rezultat[k - 1].distanta;
						}
					}
				}
				//alegere probabilitate si verificare
				int temp = 0;
				float r = random();

				for (int i = 0; i <= nRezultat; i++) {
					if (r <= rezultat[i].distanta && r >= temp) {
						listaTabu[furnica].nr++;
						listaTabu[furnica].lista[listaTabu[furnica].nr] = rezultat[i].indice;

						if (listaTabu[furnica].lista[listaTabu[furnica].nr] == 3)
							solutie = true;
						break;
					}
					temp = rezultat[i].distanta;
				}
			}
		}
		evaporareFeromon();
		//print();
	}
	print();
}


void main() {
	traseu[Cr][Va] = 146;
	traseu[Va][Cr] = 146;
	traseu[Va][Si] = 80;
	traseu[Si][Va] = 80;
	traseu[Si][Br] = 142;
	traseu[Br][Si] = 142;
	traseu[Br][Bu] = 161;
	traseu[Bu][Br] = 161;
	traseu[Bu][Pi] = 101;
	traseu[Pi][Bu] = 101;
	traseu[Pi][Br] = 149;
	traseu[Br][Pi] = 149;
	traseu[Pi][Va] = 97;
	traseu[Va][Pi] = 97;
	traseu[Pi][Cr] = 138;
	traseu[Cr][Pi] = 138;

	//print();
	cautare();
	afisareCale();
	std::cout << std::endl;
	system("pause");
}
